from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from db.crud import get_user_by_telegram_id, create_or_update_user, save_feedback

router = Router()


class SetFeedbackState(StatesGroup):
    success = State()


@router.callback_query(F.data == "success_feedback")
async def handle_success_feedback(callback: CallbackQuery, state: FSMContext):
    user = await get_user_by_telegram_id(callback.from_user.id)

    if not user:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    partner_id = user.last_matched_with

    if partner_id is None:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")
        return

    partner = await get_user_by_telegram_id(partner_id)

    if not partner:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")
        return

    await callback.message.answer(
        "–ö–ª–∞—Å—Å! üéâ\n"
        "–î–µ–ª–∏—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ ‚Äì –∫–∞–∫ –ø—Ä–æ—à–ª–∞ –≤—Å—Ç—Ä–µ—á–∞? "
        f"–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç–µ–±—è —É–¥–∏–≤–∏–ª {partner.full_name} @{partner.username}!")

    await state.set_state(SetFeedbackState.success)


@router.message(SetFeedbackState.success)
async def enter_feedback(message: Message, state: FSMContext):
    await state.clear()

    user = await get_user_by_telegram_id(message.from_user.id)

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    partner = await get_user_by_telegram_id(user.last_matched_with)

    if partner is None:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω")
        return

    await save_feedback(user_id=user.id, partner_id=partner.id, is_met=True, comment=message.text)

    await create_or_update_user(message.from_user.id, {
        "last_match_is_success": None,
        "last_matched_with": None,
        "last_matched_at": None
    })

    await message.answer(
        "–ù–∞ —ç—Ç–æ–º –≤—Å–µ, –Ω–æ –º—ã –µ—â–µ –≤—Å—Ç—Ä–µ—Ç–∏–º—Å—è! üòâ\n"
        "–°–∫–æ—Ä–æ –Ω–æ–≤—ã–π –º—ç—Ç—á –∏ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ñ–¥—É —Ç–µ–±—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!")


@router.callback_query(F.data == "failure_feedback")
async def handle_failure_feedback(callback: CallbackQuery):
    await callback.message.answer(
        "–í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! ‚è≥\n"
        "–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –¥–µ–Ω—å, —á—Ç–æ–±—ã –∑–∞–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ. "
        "–ï—â—ë –Ω–µ –ø–æ–∑–¥–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥!")

    await create_or_update_user(callback.from_user.id, {"last_match_is_success": False})


@router.callback_query(F.data == "second_failure_feedback")
async def handle_second_failure_feedback(callback: CallbackQuery):
    user = await get_user_by_telegram_id(callback.from_user.id)

    if not user:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    partner = await get_user_by_telegram_id(user.last_matched_with)

    if not partner:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await save_feedback(user_id=user.id, partner_id=partner.id, is_met=False, comment=None)

    await create_or_update_user(callback.from_user.id, {
        "last_match_is_success": None,
        "last_matched_with": None,
        "last_matched_at": None
    })

    await callback.message.answer(
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! ü§∑‚Äç‚ôÇÔ∏è\n"
        "–ë—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–ª–∞–Ω—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. "
        "–ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!")
